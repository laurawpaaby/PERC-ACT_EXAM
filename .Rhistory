#filter(ReactionTime < cutoff) # remove outliers above 3 SDs of the mean
# Chunk 16
class(df$correct)
ls.str(df)
df %>%
group_by(Condition) %>%
summarise(sum(correct)/length(correct))
df %>%
filter(Condition==0) %>%
group_by(congruency) %>%
summarise(sum(correct)/length(correct))
# Did any participants perform below chance level?
participantaccuracy <- df %>%
group_by(ID) %>%
summarise(sum(correct)/length(correct))
participantaccuracy
min(participantaccuracy[2])
ls.str(df)# 720
ls.str(dfcorrect) # 673
# Chunk 17
df %>%
group_by(ID) %>%
filter(correct == 0) %>%
count(correct, congruency)
# Chunk 18
df_nooutliers %>%
group_by(congruency) %>%
summarise(meanrt=mean(ReactionTime))
df_nooutliers %>%
group_by(Condition) %>%
summarise(meanrt=mean(ReactionTime))
df_nooutliers$correct <- as.factor(df_nooutliers$correct)
# Get subject mean RTs (a df where each subject has a mean RT for congruent and incongruent)
subject_means <- df_nooutliers %>%
filter(correct==1)%>%
group_by(ID, congruency) %>%
summarise(mean_rt = mean(ReactionTime))
subject_means
### another thing (only correct trials)
df_nooutliers %>%
ggplot()+
aes(x = Condition, y = ReactionTime, fill =congruency)+
geom_boxplot() +
theme() +
labs(title = 'Mean RT')
# Getting condition mean RTs
plot_means <- subject_means %>%
group_by(congruency) %>%
summarise(means = mean(mean_rt),
SEs=sd(mean_rt)/sqrt(length(mean_rt)))
## plot the condition means (wtf plt)
ggplot(plot_means,aes(x=congruency, y=means))+
geom_point()+
geom_line(stat="identity")+
geom_errorbar(aes(ymin=means-SEs, ymax=means+SEs), width=.2)+
theme_classic()+
ylab("Mean Reaction Time (ms)")+
xlab("Typing Material")
# Chunk 19
plot1 <- df_nooutliers %>%
ggplot() +
aes(x = congruency, y = ReactionTime) +
stat_summary(fun = "mean", geom = "point", size = 3) +
stat_summary(fun = 'mean', geom = 'line')+
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1) +
theme_bw()+
theme(legend.position = 'None') +
labs(title = 'Plot 1: Mean RT with SE errorbars', subtitle = "Aggregating over all three conditions")+
ylab("Mean Response Time (seconds)")+
xlab("Congruency (0 = incongruent trial, 1 = congruent trial)")
plot1
# Chunk 20
# Calculates mean, sd, se and IC
my_sum <- df_nooutliers %>%
group_by(Condition) %>%
summarise(n=n(),mean=mean(ReactionTime),
sd=sd(ReactionTime)) %>%
mutate(se=sd/sqrt(n))  %>%
mutate(ic=se*qt((1-0.05)/2+0.5, n-1))
ggplot(my_sum) +
geom_bar(aes(x=Condition, y=mean, fill=congruency), stat="identity", fill="forestgreen", alpha=0.5) +
geom_errorbar( aes(x=Condition, ymin=mean-se, ymax=mean+se), width=0.4, colour="orange", alpha=0.9, size=1.5) +
ggtitle("using standard error")
cleanmeans <- df_nooutliers %>%
group_by(Condition,congruency) %>%
summarise(mean=mean(ReactionTime))
dfcorrecty <- df_nooutliers %>%
filter(Condition==1)
dfcorrecty %>%
group_by(congruency) %>%
summarise(meanrt=mean(ReactionTime),std_mean(ReactionTime))
dfcorrectr <- df_nooutliers %>%
filter(Condition==2)
dfcorrectr %>%
group_by(congruency) %>%
summarise(meanrt=mean(ReactionTime),std_mean(ReactionTime))
# Chunk 21
pacman::p_load(plotrix)
# Chunk 22
std_mean <- function(x) sd(x)/sqrt(length(x))
std_mean(dfcorrectr$ReactionTime)
std.error(dfcorrectr$ReactionTime)
std_mean(dfcorrecty$ReactionTime)
std.error(dfcorrecty$ReactionTime)
std_mean(dfcontrol$ReactionTime)
std.error(dfcontrol$ReactionTime)
# Chunk 23
# For the table paper
df %>%
filter(Condition==2) %>%
group_by(congruency) %>%
summarise(meanrt=mean(ReactionTime),std_mean(ReactionTime))
dfcontrol <- df_nooutliers %>%
filter(Condition==0)
dfcontrol %>%
group_by(congruency) %>%
summarise(meanrt=mean(ReactionTime),std_mean(ReactionTime))
# All
plot_rt <- df_nooutliers %>%
group_by(ID, congruency) %>%
summarize(mean_rt = mean(ReactionTime)) %>%
ggplot() +
aes(x=congruency, y=mean_rt, color=congruency) +
geom_point() +
geom_line(aes(group=ID))
plot_rt
# Only yellow
plot_rt_yel <- dfcorrecty %>%
group_by(ID, congruency) %>%
summarize(mean_rt = mean(ReactionTime)) %>%
ggplot() +
aes(x=congruency, y=mean_rt, color=ID) +
geom_point() +
geom_line(aes(group=ID))
plot_rt_yel
# Only red
plot_rt_red <- dfcorrectr %>%
group_by(ID, congruency) %>%
summarize(mean_rt = mean(ReactionTime)) %>%
ggplot() +
aes(x=congruency, y=mean_rt, color=ID) +
geom_point() +
geom_line(aes(group=ID))
plot_rt_red
# Chunk 24
hist(dfcorrect$ReactionTime)
# Chunk 25
install.packages("ggthemes")
library(ggthemes)
library(RColorBrewer)
bxp <- df_nooutliers %>% ggplot(aes(x = congruency, y = ReactionTime, fill = Condition)) +
labs(x = "Congruency", y = "Response Time",
title = "Plot 2: Response time by congruency and condition")  +
geom_boxplot(width = 0.5)
bxp+theme_economist()+scale_fill_economist()
bxp+theme_economist_white()+scale_fill_economist()
bxp+theme_bluewhite()
plotnummer2 <- bxp+scale_fill_manual(values=c("snow",
"lightgoldenrod1",
"red"))+theme_bw()
grid.arrange(plot1,plotnummer2,nrow=1)
bxp + stat_summary(fun.y=mean, geom = "point", shape = 23, colour = "Black")
scale_color_brewer(palette="Dark2")
df_nooutliers%>%
group_by(ID, congruency) %>%
summarise(RT=mean(ReactionTime))
df_nooutliers%>%
group_by(ID, congruency) %>%
summarise(RT=mean(ReactionTime))
# Chunk 1
citation()
# Chunk 2: setup
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/emmaolsen/PERC-ACT_EXAM")
pacman::p_load(tidyverse,dplyr, data.table, vroom, ggplot2, readbulk, lme4, rstanarm, MuMIn, lmerTest, lme4,multcomp, interactions, sjPlot, sjmisc)
# Chunk 3
df <- read_bulk(directory = "/Users/emmaolsen/PERC-ACT_EXAM/logfiles/foranalysis",
fun = read_csv)
#df <- read_csv("/Users/emmaolsen/OneDrive - Aarhus Universitet/UNI/P&A/Exam/PERC-ACT_EXAM/logfiles_emma/logfile_test_2021_Dec_13_0937_1.csv")
# Chunk 4
# Only colourrating
colourrating <- df[which(df$...1==60),]
# df without
df_withoutcolour <- df[is.na(df$Colourrating),]
df_withoutcolour$Colourrating <- NULL
df <- df_withoutcolour
# Chunk 5
df$Colourtask = gsub("'", "", df$Colourtask)
df$Colourtask = gsub("\\[|\\]", "", df$Colourtask)
unique(df$Colourtask)
# Chunk 6
df <- df %>%
rename(keypress = Colourtask)
# Chunk 7
df$Stimulus = gsub("/Users/emmaolsen/PERC-ACT_EXAM/stimuli/", "", df$Stimulus)
df$Stimulus = gsub("/Users/emmaolsen/OneDrive - Aarhus Universitet/UNI/P&A/Exam/PERC-ACT_EXAM/stimuli/", "", df$Stimulus)
df$Stimulus = gsub("/Users/laura/Desktop/GitHub PercAct/stimuli/", "", df$Stimulus)
df$Stimulus = gsub("/Users/lur/Desktop/GitHu PercAct/stimuli/", "", df$Stimulus)
df$Stimulus = gsub(".png", "", df$Stimulus)
df$Stimulus = gsub('[[:digit:]]+', '', df$Stimulus)
# Chunk 8
df$Stimulus = gsub("a", "", df$Stimulus)
df$Stimulus = gsub("b", "", df$Stimulus)
df$Stimulus = gsub("1234567890", "", df$Stimulus)
length(unique(df$Stimulus))
# Chunk 9
df$stimcolour <- substr(df$Stimulus,1,1) #just getting the y/r letter out
df$correct = ifelse((df$stimcolour=="y" & df$keypress == "y") | (df$stimcolour=="r" & df$keypress == "r"),1,0)
ls.str(df)
# Chunk 10
df$congruency = ifelse((df$stimcolour %in% "y" & df$Condition == "1")|(df$stimcolour %in% "r" & df$Condition == "2"),1,0) #condition and stimulus is congruent
ls.str(df)
data.frame(df$Condition, df$stimcolour, df$congruency)
# Chunk 11
#test <- df %>%
#   filter(ID == "sjovtparticipantid")
cond0 <- df %>%
filter(Condition == 0)
len0 <- length(unique(cond0$ID))
cond1 <- df %>%
filter(Condition==1)
len1 <- length(unique(cond1$ID))
cond2 <- df %>%
filter(Condition==2)
len2 <- length(unique(cond2$ID))
Condition <- c("Condition_0", "Condition_1", "Condition_2")
number <- c(len0,len1,len2)
as_tibble(cbind(Condition,number))
# Chunk 12
df$congruency <- as.factor(df$congruency)
df$Condition <- as.factor(df$Condition)
# Chunk 13
dfcorrect <- filter(df, correct==1)
df %>%
group_by(Condition) %>%
summarise(mean(ReactionTime),count=n(),sd=sd(ReactionTime))
# Chunk 14
boxplot.stats(dfcorrect$ReactionTime)
Q1 <- 0.8184911 # tal nummer 2 fra $stats i output ovenfor
Q3 <- 1.8008647 # tal nummer 4 fra $stats i output ovenfor
IQR <- Q3 - Q1
IQR # 0.9823736
Q3
upperlimit <- Q3 + 1.5*(IQR)
upperlimit # 3.274425
which(df$ReactionTime > upperlimit) # potential outliers upper end
## Create df where outliers is removed
df_nooutliers <- dfcorrect %>%
filter(ReactionTime < 3.274425)
write.csv(df_nooutliers,"/Users/emmaolsen/PERC-ACT_EXAM/finaldata.csv", row.names = TRUE)
ls.str(df_nooutliers)
df_nooutliers %>%
filter(congruency==1) %>%
summarise(mean(ReactionTime))
df_nooutliers %>%
filter(congruency==0) %>%
summarise(mean(ReactionTime))
# Chunk 15
mean(dfcorrect$ReactionTime) #1.482402
sd(dfcorrect$ReactionTime) #1.122586
# nooutliers <- dfcorrect %>%
#mutate(cutoff = mean(ReactionTime)+2*sd(ReactionTime)) %>%
#filter(ReactionTime > mean(ReactionTime)+3*sd(ReactionTime)) %>%
#filter(ReactionTime < cutoff) # remove outliers above 3 SDs of the mean
# Chunk 16
class(df$correct)
ls.str(df)
df %>%
group_by(Condition) %>%
summarise(sum(correct)/length(correct))
df %>%
filter(Condition==0) %>%
group_by(congruency) %>%
summarise(sum(correct)/length(correct))
# Did any participants perform below chance level?
participantaccuracy <- df %>%
group_by(ID) %>%
summarise(sum(correct)/length(correct))
participantaccuracy
min(participantaccuracy[2])
ls.str(df)# 720
ls.str(dfcorrect) # 673
# Chunk 17
df %>%
group_by(ID) %>%
filter(correct == 0) %>%
count(correct, congruency)
# Chunk 18
df_nooutliers %>%
group_by(congruency) %>%
summarise(meanrt=mean(ReactionTime))
df_nooutliers %>%
group_by(Condition) %>%
summarise(meanrt=mean(ReactionTime))
df_nooutliers$correct <- as.factor(df_nooutliers$correct)
# Get subject mean RTs (a df where each subject has a mean RT for congruent and incongruent)
subject_means <- df_nooutliers %>%
filter(correct==1)%>%
group_by(ID, congruency) %>%
summarise(mean_rt = mean(ReactionTime))
subject_means
### another thing (only correct trials)
df_nooutliers %>%
ggplot()+
aes(x = Condition, y = ReactionTime, fill =congruency)+
geom_boxplot() +
theme() +
labs(title = 'Mean RT')
# Getting condition mean RTs
plot_means <- subject_means %>%
group_by(congruency) %>%
summarise(means = mean(mean_rt),
SEs=sd(mean_rt)/sqrt(length(mean_rt)))
## plot the condition means (wtf plt)
ggplot(plot_means,aes(x=congruency, y=means))+
geom_point()+
geom_line(stat="identity")+
geom_errorbar(aes(ymin=means-SEs, ymax=means+SEs), width=.2)+
theme_classic()+
ylab("Mean Reaction Time (ms)")+
xlab("Typing Material")
# Chunk 19
plot1 <- df_nooutliers %>%
ggplot() +
aes(x = congruency, y = ReactionTime) +
stat_summary(fun = "mean", geom = "point", size = 3) +
stat_summary(fun = 'mean', geom = 'line')+
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1) +
theme_bw()+
theme(legend.position = 'None') +
labs(title = 'Plot 1: Mean RT with SE errorbars', subtitle = "Aggregating over all three conditions")+
ylab("Mean Response Time (seconds)")+
xlab("Congruency (0 = incongruent trial, 1 = congruent trial)")
plot1
# Chunk 20
# Calculates mean, sd, se and IC
my_sum <- df_nooutliers %>%
group_by(Condition) %>%
summarise(n=n(),mean=mean(ReactionTime),
sd=sd(ReactionTime)) %>%
mutate(se=sd/sqrt(n))  %>%
mutate(ic=se*qt((1-0.05)/2+0.5, n-1))
ggplot(my_sum) +
geom_bar(aes(x=Condition, y=mean, fill=congruency), stat="identity", fill="forestgreen", alpha=0.5) +
geom_errorbar( aes(x=Condition, ymin=mean-se, ymax=mean+se), width=0.4, colour="orange", alpha=0.9, size=1.5) +
ggtitle("using standard error")
cleanmeans <- df_nooutliers %>%
group_by(Condition,congruency) %>%
summarise(mean=mean(ReactionTime))
dfcorrecty <- df_nooutliers %>%
filter(Condition==1)
dfcorrecty %>%
group_by(congruency) %>%
summarise(meanrt=mean(ReactionTime),std_mean(ReactionTime))
dfcorrectr <- df_nooutliers %>%
filter(Condition==2)
dfcorrectr %>%
group_by(congruency) %>%
summarise(meanrt=mean(ReactionTime),std_mean(ReactionTime))
# Chunk 21
pacman::p_load(plotrix)
# Chunk 22
std_mean <- function(x) sd(x)/sqrt(length(x))
std_mean(dfcorrectr$ReactionTime)
std.error(dfcorrectr$ReactionTime)
std_mean(dfcorrecty$ReactionTime)
std.error(dfcorrecty$ReactionTime)
std_mean(dfcontrol$ReactionTime)
std.error(dfcontrol$ReactionTime)
# Chunk 23
# For the table paper
df %>%
filter(Condition==2) %>%
group_by(congruency) %>%
summarise(meanrt=mean(ReactionTime),std_mean(ReactionTime))
dfcontrol <- df_nooutliers %>%
filter(Condition==0)
dfcontrol %>%
group_by(congruency) %>%
summarise(meanrt=mean(ReactionTime),std_mean(ReactionTime))
# All
plot_rt <- df_nooutliers %>%
group_by(ID, congruency) %>%
summarize(mean_rt = mean(ReactionTime)) %>%
ggplot() +
aes(x=congruency, y=mean_rt, color=congruency) +
geom_point() +
geom_line(aes(group=ID))
plot_rt
# Only yellow
plot_rt_yel <- dfcorrecty %>%
group_by(ID, congruency) %>%
summarize(mean_rt = mean(ReactionTime)) %>%
ggplot() +
aes(x=congruency, y=mean_rt, color=ID) +
geom_point() +
geom_line(aes(group=ID))
plot_rt_yel
# Only red
plot_rt_red <- dfcorrectr %>%
group_by(ID, congruency) %>%
summarize(mean_rt = mean(ReactionTime)) %>%
ggplot() +
aes(x=congruency, y=mean_rt, color=ID) +
geom_point() +
geom_line(aes(group=ID))
plot_rt_red
# Chunk 24
hist(dfcorrect$ReactionTime)
# Chunk 25
install.packages("ggthemes")
library(ggthemes)
library(RColorBrewer)
bxp <- df_nooutliers %>% ggplot(aes(x = congruency, y = ReactionTime, fill = Condition)) +
labs(x = "Congruency", y = "Response Time",
title = "Plot 2: Response time by congruency and condition")  +
geom_boxplot(width = 0.5)
bxp+theme_economist()+scale_fill_economist()
bxp+theme_economist_white()+scale_fill_economist()
bxp+theme_bluewhite()
plotnummer2 <- bxp+scale_fill_manual(values=c("snow",
"lightgoldenrod1",
"red"))+theme_bw()
grid.arrange(plot1,plotnummer2,nrow=1)
bxp + stat_summary(fun.y=mean, geom = "point", shape = 23, colour = "Black")
scale_color_brewer(palette="Dark2")
# Chunk 26
library(hrbrthemes)
library(dplyr)
library(tidyr)
library(viridis)
# CONGRUENCY ALL CONDITION
p2 <- ggplot(data=df_nooutliers, aes(x=ReactionTime, group=congruency, fill=congruency)) +
geom_density(adjust=1.5, alpha=.4) +
theme_ipsum()
p2
# CONGRUENCY RED CONDITION
p3 <- ggplot(data=dfcorrectr, aes(x=ReactionTime, group=congruency, fill=congruency)) +
geom_density(adjust=1.5, alpha=.4) +
theme_ipsum()
p3
# CONGRUENCY YELLOW CONDITION
p4 <- ggplot(data=dfcorrecty, aes(x=ReactionTime, group=congruency, fill=congruency)) +
geom_density(adjust=1.5, alpha=.4) +
theme_ipsum()
p4
# RT CONTROL
p5 <- ggplot(data=dfcontrol, aes(x=ReactionTime, fill=Condition)) +
geom_density(adjust=1.5, alpha=.4) +
theme_ipsum()
p5
library(gridExtra)
grid.arrange(p3,p4,nrow=1)
# Chunk 27
ggplot(data=df_nooutliers, aes(x=ReactionTime, group=congruency, fill=congruency)) +
geom_density(adjust=1.5) +
theme_ipsum() +
facet_wrap(~Condition) +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
axis.ticks.x=element_blank()
)
# Chunk 28
df_nooutliers %>% ggplot(plot_means, aes(x=congruency, y=means, group=Block, color=Condition))+
geom_point()+
geom_line()+
geom_errorbar(aes(ymin=means-SEs, ymax=means+SEs), width=.2)+
theme_classic()+
ylab("Mean Reaction Time (ms)")+
xlab("plotteplot")
# Chunk 29
# here the raw activity counts are listed
p <- qplot(...1,ReactionTime,data=df_nooutliers)
p <- p+geom_line(aes(x=...1, y=ReactionTime,group=ID,colour=Condition))
print(p)
# Or the treatment group average time profiles
pacman::p_load(doBy)
mns <- summaryBy(ReactionTime ~ ...1 + Condition, id=~...1, keep.names=TRUE, data=df_nooutliers)
p <- qplot(...1, ReactionTime, data = df_nooutliers)
p <- p + geom_line(aes(x=...1, y=ReactionTime, group=Condition, colour=Condition))
print(p)
# Chunk 30
with(df_nooutliers, interaction.plot(...1, ID, ReactionTime, legend = F, lty = rep(1:3,
each = 10), col = rep(1:12, each = 10)))
# Chunk 31
library(tidyverse)
means <- df_nooutliers%>%
group_by(ID, Condition) %>%
summarise(mean_rt = mean(ReactionTime))
means
# Chunk 32
df_nooutliers %>%
group_by(Condition) %>%
summarise(meanrt=mean(ReactionTime))
# Chunk 33
ls.str(df_nooutliers)
df_nooutliers$Stimulus <- as.factor(df_nooutliers$Stimulus)
colourstimcheck <- lmer(ReactionTime ~ Stimulus + (1|ID), data = df_nooutliers)
summary(colourstimcheck)
df_nooutliers %>%
group_by(ID, congruency) %>%
summarise(RT=mean(ReactionTime))
df_nooutliers %>%
group_by(Condition, congruency) %>%
summarise(RT=mean(ReactionTime))
df_nooutliers %>%
group_by(Condition, congruency) %>%
summarise(RT=mean(ReactionTime))
df_nooutliers %>%
group_by(Condition) %>%
summarise(RT=mean(ReactionTime))
